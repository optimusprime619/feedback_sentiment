<?php

/**
 * @file This module uses the Insight analyzer to process and render the sentiment analysis result
 */

/**
 * Implements hook_help().
 */
function analyzer_help($path, $arg) {
  switch ($path) {
    case 'admin/help#analyzer':
      return '<p>' . t("This module serves to get the input file and subject it to processing using the PHPInsight library.
      The analyzed score information is classified as either positive/negative/neutral and written to a file for further use") . '</p>';
  }
}

/**
 * Implements hook_permission().
 */
function analyzer_permission() {
  return array(
    'analyze user comments' => array(
      'title' => 'Analyze user comments',
      'description' => 'This permission enables user to upload and identify user comment sentiment',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function analyzer_menu() {
  $items = array();
  $items['admin/config/analyzer'] = array(
    'title' => 'User Comment Sentiment Analyzer',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('analyzer_file_upload_form'),
    'access arguments' => array('analyze user comments'),
    'file' => 'includes/analyzer.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_libraries_info()
 */
function analyzer_libraries_info() {
 $libraries['PHPInsight'] = array(
  'name' => 'PHP Insight',
  'vendor url' => 'https://github.com/JWHennessey/phpInsight',
  'download url' => 'https://github.com/JWHennessey/phpInsight/archive/master.zip',
  'files' => array(
    'php' => array('autoload.php'),
  ),
  'xautoload' => function($adapter) {
    $adapter->namespaceRoot('PHPInsight', 'lib');
  },
  );
 return $libraries;
}
 
/**
 * Function which helps in predicting Sentiments.
 */
function analyzer_get_sentiment($file_value = NULL,$original_file_name = NULL) {
  $loaded = libraries_load('PHPInsight'); 
  $status = FALSE;
  if($loaded === FALSE){
    return $status;
  }

  try {
    $sentiment = new \PHPInsight\Sentiment();
    $result_data = array();
    if (isset($file_value)) {
      foreach ($file_value as $string) {
        // calculations:
        $scores = $sentiment->score($string);
        $class = $sentiment->categorise($string);
        $result_data[] = $class;               
      }
    }
    else {
      drupal_set_message(t('No data read from file'), 'error');
    }
    unset($file_value);
    $sentiment_analysis_results = implode("\n", $result_data);
    $destination_dir = "public://" . variable_get('sentiment_analysis_destination_dir', "output");
    $dir_writable = file_prepare_directory($destination_dir, FILE_CREATE_DIRECTORY);
    if ($dir_writable === FALSE) {
      drupal_set_message(t('Could not create or write destination directory @file', array('@file' => $dir_writable)), 'error');
      return $status;
    }
    if(file_save_data($sentiment_analysis_results, $destination_dir . "/" . $original_file_name . "_result.txt")){
      $status = TRUE;
    }
    unset($original_file_name);    
  }
  catch (Exception $e) {
    drupal_set_message(t('Could not upload bcoz of error :: @e', array('@e' => $e->getMessage)), 'error');
    watchdog_exception('analyzer', $e);
  }

  return $status;
}
